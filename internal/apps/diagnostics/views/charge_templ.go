// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.924
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"github.com/tikhonp/medsenger-pill-dispenser-bot/internal/bviews"
)

func ChargePage(voltageData [][]float64, timeLabels [][]string, seriesNames []string, errString string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<h3>График заряда батареи</h3>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			for i, name := range seriesNames {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<div class=\"card bg\"><div class=\"card-body\"><div style=\"display:flex;justify-content:space-between;align-items:center;\"><h4 style=\"margin:0 8px 8px 0;\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var3 string
				templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(name)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/apps/diagnostics/views/charge.templ`, Line: 17, Col: 44}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</h4><div><button class=\"btn btn-sm btn-outline-primary\" data-action=\"download\" data-idx=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var4 string
				templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", i))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/apps/diagnostics/views/charge.templ`, Line: 19, Col: 108}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "\">CSV</button> <button class=\"btn btn-sm btn-outline-secondary\" data-action=\"toggle-fill\" data-idx=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var5 string
				templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", i))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/apps/diagnostics/views/charge.templ`, Line: 20, Col: 113}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "\">Заполнение</button></div></div><div class=\"small text-muted\" style=\"margin-bottom:8px;\">Последнее: <span id=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var6 string
				templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs("last-" + fmt.Sprintf("%d", i))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/apps/diagnostics/views/charge.templ`, Line: 23, Col: 122}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "\">—</span></div><canvas id=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var7 string
				templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs("chargeChart-" + fmt.Sprintf("%d", i))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/apps/diagnostics/views/charge.templ`, Line: 24, Col: 54}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "\" class=\"chart-canvas\" height=\"400\"></canvas></div></div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "  ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if errString != "" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "<div class=\"card bg\"><div class=\"card-body\"><span>ОШИБКА: ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var8 string
				templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(errString)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/apps/diagnostics/views/charge.templ`, Line: 33, Col: 36}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "</span></div></div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "  <ul id=\"seriesNames\" style=\"display:none;\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			for _, n := range seriesNames {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "<li>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var9 string
				templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(n)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/apps/diagnostics/views/charge.templ`, Line: 41, Col: 11}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "</li>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "</ul> ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			for i, tarr := range timeLabels {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "<ul class=\"timeLabels\" data-idx=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var10 string
				templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", i))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/apps/diagnostics/views/charge.templ`, Line: 48, Col: 57}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "\" style=\"display:none;\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				for _, t := range tarr {
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "<li>")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					var templ_7745c5c3_Var11 string
					templ_7745c5c3_Var11, templ_7745c5c3_Err = templ.JoinStringErrs(t)
					if templ_7745c5c3_Err != nil {
						return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/apps/diagnostics/views/charge.templ`, Line: 50, Col: 12}
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var11))
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, "</li>")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, "</ul>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			for i, varr := range voltageData {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, "<ul class=\"voltageData\" data-idx=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var12 string
				templ_7745c5c3_Var12, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", i))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/apps/diagnostics/views/charge.templ`, Line: 56, Col: 58}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var12))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 21, "\" style=\"display:none;\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				for _, v := range varr {
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 22, "<li>")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					var templ_7745c5c3_Var13 string
					templ_7745c5c3_Var13, templ_7745c5c3_Err = templ.JoinStringErrs(v)
					if templ_7745c5c3_Err != nil {
						return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/apps/diagnostics/views/charge.templ`, Line: 58, Col: 12}
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var13))
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 23, "</li>")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 24, "</ul>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 25, " <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script> <script>\n\t\t\t// Helper: parse time string -> epoch ms (robust)\n\t\t\tfunction toEpoch(s){\n\t\t\t\tconst d = new Date(s);\n\t\t\t\tif(!isNaN(d)) return d.getTime();\n\t\t\t\tconst m = String(s).trim().match(/^(\\d{2}|\\d{4})[-\\/](\\d{2})[-\\/](\\d{2})[ T](\\d{2}):(\\d{2}):(\\d{2})$/);\n\t\t\t\tif(m){\n\t\t\t\t\tlet year = parseInt(m[1],10);\n\t\t\t\t\tif(year < 100) year += 2000;\n\t\t\t\t\treturn Date.UTC(year, parseInt(m[2],10)-1, parseInt(m[3],10), parseInt(m[4],10), parseInt(m[5],10), parseInt(m[6],10));\n\t\t\t\t}\n\t\t\t\treturn NaN;\n\t\t\t}\n\n\t\t\t// Format epoch ms into \"YY-MM-DD HH:MM:SS\" (UTC)\n\t\t\tfunction fmtYYMMDD(epoch){\n\t\t\t\tconst d = new Date(Number(epoch));\n\t\t\t\tconst yy = String(d.getUTCFullYear()).slice(-2);\n\t\t\t\tconst mm = String(d.getUTCMonth()+1).padStart(2,'0');\n\t\t\t\tconst dd = String(d.getUTCDate()).padStart(2,'0');\n\t\t\t\tconst hh = String(d.getUTCHours()).padStart(2,'0');\n\t\t\t\tconst min = String(d.getUTCMinutes()).padStart(2,'0');\n\t\t\t\tconst ss = String(d.getUTCSeconds()).padStart(2,'0');\n\t\t\t\treturn `${yy}-${mm}-${dd} ${hh}:${min}:${ss}`;\n\t\t\t}\n\n\t\t\t// Read series names (preserve order)\n\t\t\tconst seriesNames = Array.from(document.querySelectorAll('#seriesNames li')).map(li => li.textContent);\n\n\t\t\t// Build arrays of time lists and voltage lists indexed by series order\n\t\t\tconst timeLists = Array.from(document.querySelectorAll(\".timeLabels\"))\n\t\t\t\t.map(ul => Array.from(ul.querySelectorAll('li')).map(li => toEpoch(li.textContent)));\n\n\t\t\tconst voltageLists = Array.from(document.querySelectorAll(\".voltageData\"))\n\t\t\t\t.map(ul => Array.from(ul.querySelectorAll('li')).map(li => {\n\t\t\t\t\tconst v = parseFloat(li.textContent);\n\t\t\t\t\treturn isNaN(v) ? null : v;\n\t\t\t\t}));\n\n\t\t\t// Simple palette reused per-chart\n\t\t\tconst palette = ['#4caf50','#2196f3','#ff9800','#9c27b0','#f44336','#00bcd4','#8bc34a','#ffc107'];\n\n\t\t\t// Hold chart instances by index\n\t\t\tconst charts = [];\n\n\t\t\t// For each series, build sorted pairs (epoch, value), ensure strict chronological order, then draw chart\n\t\t\tfor(let idx = 0; idx < seriesNames.length; idx++){\n\t\t\t\tconst times = timeLists[idx] || [];\n\t\t\t\tconst vals = voltageLists[idx] || [];\n\n\t\t\t\t// Pair and filter invalid entries\n\t\t\t\tconst pairs = [];\n\t\t\t\tfor(let j=0;j<Math.max(times.length, vals.length); j++){\n\t\t\t\t\tconst t = times[j];\n\t\t\t\t\tconst v = vals[j];\n\t\t\t\t\tif(typeof t !== 'number' || isNaN(t)) continue;\n\t\t\t\t\tpairs.push({t: t, v: (v === undefined ? null : v)});\n\t\t\t\t}\n\n\t\t\t\t// Sort strictly by time ascending\n\t\t\t\tpairs.sort((a,b) => a.t - b.t);\n\n\t\t\t\t// Build labels and data arrays\n\t\t\t\tconst labels = pairs.map(p => fmtYYMMDD(p.t));\n\t\t\t\tconst data = pairs.map(p => p.v);\n\n\t\t\t\t// Chart config for this series\n\t\t\t\tconst color = palette[idx % palette.length];\n\t\t\t\tconst bgColor = `rgba(${parseInt(color.slice(1,3),16)},${parseInt(color.slice(3,5),16)},${parseInt(color.slice(5,7),16)},0.08)`;\n\n\t\t\t\tconst canvas = document.getElementById('chargeChart-' + idx);\n\t\t\t\t// If canvas not present, skip\n\t\t\t\tif(!canvas) continue;\n\n\t\t\t\tconst chartData = {\n\t\t\t\t\tlabels: labels,\n\t\t\t\t\tdatasets: [{\n\t\t\t\t\t\tlabel: seriesNames[idx] || ('Series ' + (idx+1)),\n\t\t\t\t\t\tdata: data,\n\t\t\t\t\t\tborderColor: color,\n\t\t\t\t\t\tbackgroundColor: bgColor,\n\t\t\t\t\t\tfill: false,\n\t\t\t\t\t\ttension: 0.3,\n\t\t\t\t\t\tpointRadius: 2,\n\t\t\t\t\t\tspanGaps: true\n\t\t\t\t\t}]\n\t\t\t\t};\n\t\t\t\tconst config = {\n\t\t\t\t\ttype: 'line',\n\t\t\t\t\tdata: chartData,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\t// static size: Chart won't resize the canvas automatically\n\t\t\t\t\t\tresponsive: false,\n\t\t\t\t\t\tscales: {\n\t\t\t\t\t\t\ty: { title: { display: true, text: 'мВ' } },\n\t\t\t\t\t\t\tx: { title: { display: true, text: 'Время' } }\n\t\t\t\t\t\t},\n\t\t\t\t\t\tplugins: { legend: { display: false } },\n\t\t\t\t\t\tinteraction: { mode: 'index', intersect: false },\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tconst ctx = canvas.getContext('2d');\n\t\t\t\t// destroy previous chart instance if exists to avoid overlays\n\t\t\t\tif(charts[idx] && typeof charts[idx].destroy === 'function'){\n\t\t\t\t\ttry { charts[idx].destroy(); } catch(e){ /* ignore */ }\n\t\t\t\t}\n\t\t\t\tconst chart = new Chart(ctx, config);\n\t\t\t\tcharts[idx] = chart;\n\n\t\t\t\t// Update last known value display\n\t\t\t\t(function(i, pairsLocal){\n\t\t\t\t\tconst el = document.getElementById('last-' + i);\n\t\t\t\t\tif(!el) return;\n\t\t\t\t\t// find last non-null value from end\n\t\t\t\t\tfor(let k = pairsLocal.length - 1; k >= 0; k--){\n\t\t\t\t\t\tif(pairsLocal[k].v !== null && pairsLocal[k].v !== undefined){\n\t\t\t\t\t\t\tel.textContent = fmtYYMMDD(pairsLocal[k].t) + ' — ' + pairsLocal[k].v;\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tel.textContent = '—';\n\t\t\t\t})(idx, pairs);\n\t\t\t}\n\n\t\t\t// CSV export for a series index\n\t\t\tfunction downloadCSV(idx){\n\t\t\t\tconst chart = charts[idx];\n\t\t\t\tif(!chart) return;\n\t\t\t\tconst labels = chart.data.labels || [];\n\t\t\t\tconst data = (chart.data.datasets[0] && chart.data.datasets[0].data) || [];\n\t\t\t\tlet csv = 'time;value\\n';\n\t\t\t\tfor(let i=0;i<labels.length;i++){\n\t\t\t\t\tconst v = (data[i] === null || data[i] === undefined) ? '' : data[i];\n\t\t\t\t\tcsv += `${labels[i]};${v}\\n`;\n\t\t\t\t}\n\t\t\t\tconst blob = new Blob([csv], {type: 'text/csv;charset=utf-8;'});\n\t\t\t\tconst url = URL.createObjectURL(blob);\n\t\t\t\tconst a = document.createElement('a');\n\t\t\t\ta.href = url;\n\t\t\t\ta.download = (seriesNames[idx] || ('series-' + idx)) + '.csv';\n\t\t\t\tdocument.body.appendChild(a);\n\t\t\t\ta.click();\n\t\t\t\ta.remove();\n\t\t\t\tURL.revokeObjectURL(url);\n\t\t\t}\n\n\t\t\t// Toggle points visibility\n\t\t\tfunction togglePoints(idx){\n\t\t\t\tconst chart = charts[idx];\n\t\t\t\tif(!chart) return;\n\t\t\t\tconst ds = chart.data.datasets[0];\n\t\t\t\tds.pointRadius = (ds.pointRadius && ds.pointRadius > 0) ? 0 : 2;\n\t\t\t\tchart.update();\n\t\t\t}\n\n\t\t\t// Toggle fill under line\n\t\t\tfunction toggleFill(idx){\n\t\t\t\tconst chart = charts[idx];\n\t\t\t\tif(!chart) return;\n\t\t\t\tconst ds = chart.data.datasets[0];\n\t\t\t\tds.fill = !ds.fill;\n\t\t\t\tchart.update();\n\t\t\t}\n\n\t\t\t// Attach button handlers (delegated)\n\t\t\tArray.from(document.querySelectorAll('button[data-action]')).forEach(btn => {\n\t\t\t\tbtn.addEventListener('click', function(){\n\t\t\t\t\tconst action = this.getAttribute('data-action');\n\t\t\t\t\tconst idx = parseInt(this.getAttribute('data-idx'), 10);\n\t\t\t\t\tif(isNaN(idx)) return;\n\t\t\t\t\tif(action === 'download') downloadCSV(idx);\n\t\t\t\t\tif(action === 'toggle-points') togglePoints(idx);\n\t\t\t\t\tif(action === 'toggle-fill') toggleFill(idx);\n\t\t\t\t});\n\t\t\t});\n\t\t</script> ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = Styles().Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = bviews.Base("График заряда батареи").Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func Styles() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var14 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var14 == nil {
			templ_7745c5c3_Var14 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 26, "<style>\n\t\t.card.bg {\n\t\t\tbackground-color: #f5f5f5;\n\t\t\tmargin-bottom: 20px;\n\t\t}\n\t\t.chart-canvas {\n\t\t\tdisplay: block;\n\t\t}\n\t\t.card.bg .card-body {\n\t\t\tpadding: 15px;\n\t\t}\n\t</style>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
